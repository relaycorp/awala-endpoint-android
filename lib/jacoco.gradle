apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8"
}

def jacocoConfig = {
    sourceDirectories.from = files(["$project.projectDir/src/main/java"])
    classDirectories.from = files([
      fileTree(
        dir: project.buildDir,
        includes: [
          "intermediates/javac/debug/**",
          "tmp/kotlin-classes/debug/**"
        ],
        excludes: [
          'android/**/*.*',
          '**/R.class',
          '**/R$*.class',
          '**/BuildConfig.*',
          '**/Manifest*.*',
          '**/*Test*.*'
        ]
      )
    ])

    executionData.from = fileTree(dir: project.buildDir, includes: [
      'jacoco/testDebugUnitTest.exec',
      'outputs/code_coverage/debugAndroidTest/connected/**/*.ec',
      'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec'
    ])

    if (project.hasProperty('codeCoverageDataLocation')) {
        executionData.from += fileTree(dir: codeCoverageDataLocation, includes: ['**/*.ec'])
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    doLast {
        println("View code coverage at:")
        println("file://$buildDir/reports/coverage/index.html")
    }
    finalizedBy("jacocoTestReport", "jacocoTestCoverageVerification")
}

task jacocoTestReport(type: JacocoReport) {
    configure jacocoConfig

    reports {
        xml.required.set(true)
        html.required.set(true)
        html.outputLocation.set(file("$buildDir/reports/coverage"))
    }
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
    configure jacocoConfig

    violationRules {
        rule {
            limit {
                counter = "CLASS"
                value = "MISSEDCOUNT"
                // Workaround for https://github.com/jacoco/jacoco/issues/654
                maximum = "17".toBigDecimal()
            }

            limit {
                counter = "METHOD"
                value = "MISSEDCOUNT"
                // Workaround for https://github.com/jacoco/jacoco/issues/654
                maximum = "41".toBigDecimal()
            }

            limit {
                counter = "BRANCH"
                value = "MISSEDCOUNT"
                // Workaround for https://github.com/jacoco/jacoco/issues/1036
                maximum = "51".toBigDecimal()
            }
        }
    }
}
